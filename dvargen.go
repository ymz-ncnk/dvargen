package dvargen

import (
	"bytes"
	"go/format"
	"os"
	template_mod "text/template"
)

const template = "" +
	"// Code generated by dvargen. DO NOT EDIT." +
	"\n\n" +
	"{{ $name := .Name }}" +
	"package {{.Package}}\n\n" +
	"var {{$name}} map[string]string\n" +
	"func init() {\n" +
	"	 {{$name}} = make(map[string]string)\n" +
	"  {{- range $fileName, $fileData := .Map }}\n" +
	"    {{$name}}[\"{{$fileName}}\"] = `{{$fileData}}`\n" +
	"  {{- end }}\n" +
	"}"

// FilenameExtension is an extension of the generated files.
const FilenameExtension = ".dvar.go"

// DefConf is the default configuration for DVarGen.
var DefConf = Conf{
	Path: "./",
	Perm: 0755,
}

// Generate generates a file with Golang source code, which initializes a
// map variable with directory content. Each key of this map is a file name,
// and value - file data.
// Uses DefConf.
func Generate(vDesc DVarDesc) error {
	return GenerateAs(vDesc, DefConf)
}

// GenerateAs performs like generate. With help of this method you can configure
// the generation process.
func GenerateAs(vDesc DVarDesc, conf Conf) error {
	m, err := makeMap(vDesc.Dir)
	if err != nil {
		return err
	}
	data, err := generate(vDesc, m)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile(filepath(conf.Path, vDesc), data, conf.Perm)
	if err != nil {
		return err
	}
	return nil
}

func generate(vDesc DVarDesc, m map[string]string) ([]byte, error) {
	tmpl, err := template_mod.New("base").Parse(template)
	if err != nil {
		return nil, err
	}
	buf := bytes.NewBuffer(make([]byte, 0))
	err = tmpl.ExecuteTemplate(buf, "base", struct {
		Package string
		Name    string
		Map     map[string]string
	}{
		Package: vDesc.Package,
		Name:    vDesc.Varname,
		Map:     m,
	})
	if err != nil {
		return nil, err
	}
	return format.Source(buf.Bytes())
}

func makeMap(dir string) (map[string]string, error) {
	var (
		data     []byte
		filename string
		m        = make(map[string]string)
	)
	entries, err := os.ReadDir(dir)
	if err != nil {
		return nil, err
	}
	for i := 0; i < len(entries); i++ {
		if entries[i].IsDir() {
			return nil, ErrSubdir
		}
		filename = entries[i].Name()
		data, err = os.ReadFile(dir + string(os.PathSeparator) + filename)
		if err != nil {
			return nil, err
		}
		m[string(filename)] = string(data)
	}
	return m, nil
}

func filepath(path string, vDesc DVarDesc) string {
	return path + string(os.PathSeparator) + filename(vDesc)
}

func filename(vDesc DVarDesc) string {
	return vDesc.Varname + FilenameExtension
}
